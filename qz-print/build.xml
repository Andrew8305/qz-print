<?xml version="1.0" encoding="UTF-8"?>

<project name="qz" default="distribute" basedir=".">

    <target name="distribute" depends="init,clean,sign-jar,include-assets">
        <zip destfile="${zip.file}" basedir="${dist.dir}"/>

        <echo message="Process complete" />
    </target>

    <target name="init">
        <property file="ant/project.properties"/>

        <!-- Your custom code signing properties here. Feel free to change. -->
        <!-- The project will default to qz.ks if it doesn't exist -->
        <property file="${user.home}/Desktop/Code Signing/private.properties"/>

        <!-- The default code signing properties which uses qz.ks. -->
        <!-- Please leave this value the netbeans default as a fallback. -->
        <property file="ant/private/private.properties"/>

        <echo message="Building ${build.name} ${build.version} using JDK ${ant.java.version}" />
    </target>

    <target name="clean" depends="init">
        <delete dir="${out.dir}"/>
        <delete file="${basedir}/qz-print.nsi"/>
    </target>

    <target name="compile" depends="init">
        <mkdir dir="${build.dir}"/>
        <javac destdir="${build.dir}" source="${javac.source}" target="${javac.target}">
            <src path="${src.dir}"/>
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${java.home}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>

        <!-- Include non-class files from src in build directory -->
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}" excludes="**/*.java"/>
        </copy>
    </target>

    <target name="build-jar" depends="compile">
        <echo>Building Jar for Applet use</echo>
        <jar compress="${jar.compress}" index="${jar.index}" destfile="${dist.applet.jar}" duplicate="preserve">
            <fileset dir="${build.dir}" excludes="org/joor/*.*,qz/ws/*.*"/>
            <manifest>
                <attribute name="Application-Name" value="${manifest.application.name}"/>
                <attribute name="Main-Class" value="${manifest.main.applet.class}"/>
                <attribute name="Permissions" value="${manifest.permissions}"/>
                <attribute name="Codebase" value="${manifest.codebase}"/>
                <attribute name="Caller-Allowable-Codebase" value="${manifest.caller.allowable.codebase}"/>
                <attribute name="Application-Library-Allowable-Codebase" value="${manifest.application.allowable.codebase}"/>
            </manifest>
        </jar>
        <copy todir="${dist.applet.dir}/${lib.dir}">
            <fileset dir="${lib.dir}" includes="**/*.jar" excludes="ws/*.*,plugin.jar"/>
        </copy>

        <echo>Building Jar for Socket use</echo>
        <jar compress="${jar.compress}" index="${jar.index}" destfile="${dist.socket.jar}" duplicate="preserve">
            <fileset dir="${build.dir}"/>
            <zipgroupfileset dir="${lib.dir}" includes="**/*.jar"/>
            <manifest>
                <attribute name="Application-Name" value="${manifest.application.name}"/>
                <attribute name="Main-Class" value="${manifest.main.socket.class}"/>
                <attribute name="Permissions" value="${manifest.permissions}"/>
                <attribute name="Codebase" value="${manifest.codebase}"/>
                <attribute name="Caller-Allowable-Codebase" value="${manifest.caller.allowable.codebase}"/>
                <attribute name="Application-Library-Allowable-Codebase" value="${manifest.application.allowable.codebase}"/>
            </manifest>
        </jar>
    </target>


    <target name="sign-jar" depends="build-jar,sign-jar-self,sign-jar-tsa">
        <path>
            <fileset dir="${dist.dir}/${lib.dir}" includes="${lib.dir}/**/*.jar" />
        </path>
    </target>

    <!-- tsaurl attribute cannot be empty, so separate methods are needed to sign both jars -->
    <target name="sign-jar-self" unless="signing.tsaurl">
        <echo>Self-signing Applet jar</echo>
        <signjar jar="${dist.applet.jar}"
                 signedjar="${dist.applet.jar}"
                 alias="${signing.alias}"
                 storepass="${signing.storepass}"
                 keystore="${signing.keystore}"
                 keypass="${signing.keypass}"
                />

        <echo>Self-signing Socket jar</echo>
        <signjar jar="${dist.socket.jar}"
                 signedjar="${dist.socket.jar}"
                 alias="${signing.alias}"
                 storepass="${signing.storepass}"
                 keystore="${signing.keystore}"
                 keypass="${signing.keypass}"
                />
    </target>

    <target name="sign-jar-tsa" if="signing.tsaurl">
        <echo>Signing Applet jar with timestamp</echo>
        <signjar jar="${dist.applet.jar}"
                 signedjar="${dist.applet.jar}"
                 alias="${signing.alias}"
                 storepass="${signing.storepass}"
                 keystore="${signing.keystore}"
                 keypass="${signing.keypass}"
                 tsaurl="${signing.tsaurl}"
                />

        <echo>Signing Socket jar with timestamp</echo>
        <signjar jar="${dist.socket.jar}"
                 signedjar="${dist.socket.jar}"
                 alias="${signing.alias}"
                 storepass="${signing.storepass}"
                 keystore="${signing.keystore}"
                 keypass="${signing.keypass}"
                 tsaurl="${signing.tsaurl}"
                />
    </target>

    <target name="include-assets" depends="init" >
        <echo>Copying resource files to output</echo>

        <copy todir="${dist.applet.dir}/${asset.dir}">
            <fileset dir="${asset.dir}" excludes="**/*.properties"/>
        </copy>
        <copy todir="${dist.socket.dir}/${asset.dir}">
            <fileset dir="${asset.dir}" excludes="**/*.properties"/>
        </copy>

        <copy todir="${dist.applet.dir}/${js.dir}">
            <fileset dir="${js.dir}" excludes="qz-websocket.js"/>
        </copy>
        <copy todir="${dist.socket.dir}/${js.dir}">
            <fileset dir="${js.dir}"/>
        </copy>

        <copy todir="${dist.applet.dir}">
            <fileset file="sample.html"/>
        </copy>
        <copy todir="${dist.socket.dir}">
            <fileset file="sample_ws.html"/>
        </copy>

        <copy file="${jnlp.inf.dir}/APPLICATION.JNLP" tofile="${dist.applet.jnlp}" />

        <copy todir="${dist.dir}">
            <fileset file="readme.txt"/>
            <filterset>
                <filter token="VERSION" value="${build.version}"/>
            </filterset>
        </copy>
    </target>

    <target name="nsis" depends="init">
        <echo>Creating NSIS installer</echo>
        <copy file="${basedir}/qz-print.nsi.in" tofile="${basedir}/qz-print.nsi" >
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>

        <!-- Find makensis executable -->
        <property name="nsisexe" value="makensis"/>
        <property name="nsiswin" value="C:\Program Files\NSIS\makensis.exe"/>
        <property name="nsiswin64" value="C:\Program Files (x86)\NSIS\makensis.exe"/>
        <available property="nsisexe" value="${nsiswin}" type="file" file="${nsiswin}"/>
        <available property="nsisexe" value="${nsiswin64}" type="file" file="${nsiswin64}"/>

        <exec executable="${nsisexe}" failonerror="true" >
            <arg value="${basedir}/qz-print.nsi"/>
        </exec>
    </target>

</project>
